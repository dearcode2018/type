4bit
-8 , +7(0111) 

十进制 二进制补码
0 --> 0000 最小正数  (0 + 全0)
1 --> 0001
2 --> 0010
3 --> 0011
4 --> 0100
5 --> 0101
6 --> 0110
7 --> 0111

十进制 二进制补码 二进制反码 --> 二进制原码
-8 --> 1000 (0111 --> 1000)  最小负数 (1 + 全0) 最小负数不能通过原码来直观看其值
-7 --> 1001 (1000 --> 1111)
-6 --> 1010 (1001 --> 1110)
-5 --> 1011 (1010 --> 1101)
-4 --> 1100 (1011 --> 1100)
-3 --> 1101 (1100 --> 1011)
-2 --> 1110 (1101 --> 1010)
-1 --> 1111 (1110 --> 1001)

8bit
二进制补码
00000000 ~ 01111111 [0, 127]

二进制补码
10000000 ~ 11111111 [-128, -1]

总结: 在n位二进制中，除了最小的负数不能通过推敲其原码来观察其值，其他值都是可以的，
而且有个特点，仅有最小负数的补码等于其原码；类似于钟表，-1表示11点，-2表示10点，
而-12则指0点(逆时针).



原码: 10000000000000000000000000000001
反码: 11111111111111111111111111111110
补码: 11111111111111111111111111111111

整型极值
1) 最大值
01111111111111111111111111111111
2) 最小值 (-0，十进制表示为 -2^31)
人为规定-0的原码就是类型的最小值
补码(和-0原码相同): 10000000000000000000000000000000



常用2的次幂
2^3 = 8
2^4 = 16
2^5 = 32
2^6 = 64
2^7 = 128
2^8 = 256

单位
比特: bit [0, 1]
字节: byte = 8 bit [-128, 127]
千字节: kilobyte = 1024 byte
兆字节: megaByte(百万) = 1024 * 1024 byte
吉字节: gigaByte(十亿) = 1024 * 1024 * 1024 byte
T字节: geraByte(万亿) = 1024 * 1024 * 1024 * 1024 byte
P字节:petaByte
E字节:exaByte

